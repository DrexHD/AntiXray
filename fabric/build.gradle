plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url 'https://jitpack.io' } // imm_ptl_core
}

dependencies {
    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    runtimeOnly(include("com.moandjiezana.toml:toml4j:${project.toml_version}"))

    modCompileOnly("com.github.iPortalTeam:ImmersivePortalsMod:${project.fabric_imm_ptl_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("fabric")
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}