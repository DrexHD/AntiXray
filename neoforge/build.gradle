plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforged_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }

    include(forgeRuntimeLibrary("com.moandjiezana.toml:toml4j:${project.toml_version}"))

    // Allows running other mods in dev environment
    modLocalRuntime(fileTree(dir: 'runtime-mods', include: '*.jar'))
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    archiveAppendix.set("neoforge")
}

shadowJar {
    exclude "architectury.common.json"

    mergeServiceFiles()

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
    atAccessWideners.add('antixray.accesswidener')
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "mod_version", mod_version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "mod_version": mod_version
    }
}
